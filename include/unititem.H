/*
   _   _  ___ ___  _ ____   __
  | | | |/ __/ _ \| '_ \ \ / /  C++ Physical magnitudes and units conversion
  | |_| | (_| (_) | | | \ V /   Version 1.0
   \__,_|\___\___/|_| |_|\_/    https://github.com/lrleon/uconv

  This file is part of uconv library

  Copyright (c) 2018     Ixhel Mejias
                         Alberto Valderrama
                         Fernando Montilla
                         Eduardo Valderrama
                         Neylith Quintero
                         Felix Buccellato
                         Virginia Buccellato
                         Leandro Rabindranath Leon

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <https://www.gnu.org/licenses/>.
*/

# ifndef DESC_TABLE_H
# define DESC_TABLE_H

# include <memory>
# include <sstream>
# include <string>

# include <ah-string-utils.H>
# include <tpl_dynMapTree.H>

struct UnitItem
{
  friend class PhysicalQuantity;
  friend class Unit;

  const std::string name         = "Undefined";
  const std::string symbol       = "Undefined";
  const std::string description  = "Undefined";
  const std::string latex_symbol = "Undefined";

private:

  UnitItem() {}

public:

  UnitItem(const std::string & __name, const std::string & __symbol,
	   const std::string & desc) noexcept
    : name(__name), symbol(__symbol), description(desc)
  {
    // empty
  }

  UnitItem(const std::string & name, const std::string & symbol,
	   const std::string & latex_symbol,
	   const std::string & desc) noexcept
    : name(name), symbol(symbol), description(desc), latex_symbol(latex_symbol)
  {
    // empty
  }

  string to_string() const
  {
    ostringstream s;
    s << "UnitItem name = " << name << endl
      << "Symbol        = " << symbol << endl
      << "Description   = " << description;
    return s.str();
  }

  string to_string(size_t width, size_t left_margin = 0) const
  {
    const string margin(left_margin, ' ');
    ostringstream s;
    s << margin << "UnitItem name = " << name << endl
      << margin << "Symbol        = " << symbol << endl
      << margin << "Description   = "
      << align_text_to_left_except_first(description, width, 16);
    return s.str();
  }

  friend ostream & operator << (ostream & out, const UnitItem & ui)
  {
    return out << ui.to_string();
  }
};

class UnitItemTable
{
  DynMapTree<std::string, const UnitItem *> name_tbl; // index by unit
  DynMapTree<std::string, const UnitItem *> symbol_tbl; // index by symbol

public:

  DynList<const UnitItem *> items() const
  {
    return name_tbl.values();
  }

  DynList<string> names() const { return name_tbl.keys(); }

  DynList<string> symbols() const { return symbol_tbl.keys(); }

  // returns a iterator to pair<string, UnitItem*>
  auto get_it() { return name_tbl.get_it(); }

  void register_item(const UnitItem * ptr)
  {
    if (name_tbl.contains(ptr->name))
      {
	ostringstream s;
	s << " name " << ptr->name << " already exist";
	throw domain_error(s.str());
      }

    if (symbol_tbl.contains(ptr->symbol))
      {
	ostringstream s;
	s << "unit symbol " << ptr->symbol << " already exist";
	throw domain_error(s.str());
      }
    
    name_tbl.insert(ptr->name, ptr);
    symbol_tbl.insert(ptr->symbol, ptr);
  }

  bool exists_name(const string & name) const noexcept
  {
    return name_tbl.contains(name);
  }

  bool exists_symbol(const string & symbol) const noexcept
  {
    return symbol_tbl.contains(symbol);
  }

  const UnitItem * search_by_name(const string & name) const noexcept
  {
    auto p = name_tbl.search(name);
    return p ? p->second : nullptr;
  }

  const UnitItem * search_by_symbol(const string & symbol) const noexcept
  {
    auto p = symbol_tbl.search(symbol);
    return p ? p->second : nullptr;
  }

  size_t size() const noexcept { return name_tbl.size(); }

  void validate(const UnitItem * ptr, const string & str)
  {
    {
      const string & name = ptr->name;
      if (exists_name(str))
	{
	  ostringstream s;
	  s << "Repeated " << str << " name " << name;
	  throw domain_error(s.str());
	}
    }

    {
      const string & symbol = ptr->symbol;
      if (exists_symbol(str))
	{
	  ostringstream s;
	  s << "Repeated " << str << " symbol " << symbol;
	  throw domain_error(s.str());
	}
    }
  }
};


# endif // DESC_TABLE_H
